{"ast":null,"code":"import URL from \"./settings\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nconst setToken = token => {\n  localStorage.setItem(\"jwtToken\", token);\n};\n\nconst getToken = () => {\n  return localStorage.getItem(\"jwtToken\");\n};\n\nconst loggedIn = () => {\n  const loggedIn = getToken() != null;\n  return loggedIn;\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"jwtToken\");\n};\n\nfunction apiFacade() {\n  /* Insert utility-methods from a latter step (d) here (REMEMBER to uncomment in the returned object when you do)*/\n  const login = (user, password) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(URL + \"/api/login\", options).then(handleHttpErrors).then(res => {\n      setToken(res.token);\n    });\n  };\n\n  const fetchSwabiData = () => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n\n    return fetch(URL + \"/api/info/swabi\", options).then(handleHttpErrors);\n  };\n\n  const fetchJokesData = () => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n\n    return fetch(URL + \"/api/info/jokes\", options).then(handleHttpErrors);\n  };\n\n  const fetchUserData = () => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n\n    return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  return {\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    logout,\n    fetchSwabiData,\n    fetchJokesData,\n    fetchUserData\n  };\n}\n\nconst facade = apiFacade();\nexport default facade;","map":{"version":3,"sources":["/Users/jacobsimonsen/Desktop/CA3-Frontend/src/apiFacade.js"],"names":["URL","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","setToken","token","localStorage","setItem","getToken","getItem","loggedIn","logout","removeItem","apiFacade","login","user","password","options","makeOptions","username","fetch","then","fetchSwabiData","fetchJokesData","fetchUserData","method","addToken","body","opts","headers","Accept","JSON","stringify","facade"],"mappings":"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","sourcesContent":["import URL from \"./settings\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({ status: res.status, fullError: res.json() });\n  }\n  return res.json();\n}\nconst setToken = (token) => {\n  localStorage.setItem(\"jwtToken\", token);\n};\nconst getToken = () => {\n  return localStorage.getItem(\"jwtToken\");\n};\nconst loggedIn = () => {\n  const loggedIn = getToken() != null;\n  return loggedIn;\n};\nconst logout = () => {\n  localStorage.removeItem(\"jwtToken\");\n};\n\nfunction apiFacade() {\n  /* Insert utility-methods from a latter step (d) here (REMEMBER to uncomment in the returned object when you do)*/\n\n  const login = (user, password) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password,\n    });\n    return fetch(URL + \"/api/login\", options)\n      .then(handleHttpErrors)\n      .then((res) => {\n        setToken(res.token);\n      });\n  };\n  const fetchSwabiData = () => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n    return fetch(URL + \"/api/info/swabi\", options).then(handleHttpErrors);\n  };\n\n  const fetchJokesData = () => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n    return fetch(URL + \"/api/info/jokes\", options).then(handleHttpErrors);\n  };\n\n  const fetchUserData = () => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n    return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    };\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n    return opts;\n  };\n  return {\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    logout,\n    fetchSwabiData,\n    fetchJokesData,\n    fetchUserData,\n  };\n}\nconst facade = apiFacade();\nexport default facade;\n"]},"metadata":{},"sourceType":"module"}